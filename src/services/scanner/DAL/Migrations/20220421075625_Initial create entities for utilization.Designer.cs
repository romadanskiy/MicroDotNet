// <auto-generated />
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ScannerDbContext))]
    [Migration("20220421075625_Initial create entities for utilization")]
    partial class Initialcreateentitiesforutilization
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0-preview.3.22175.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entity.Garbage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Barcode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Garbage");
                });

            modelBuilder.Entity("DAL.Entity.GarbageReceptionPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GarbageReceptionPoint");
                });

            modelBuilder.Entity("DAL.Entity.GarbageType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GarbageType");
                });

            modelBuilder.Entity("GarbageGarbageType", b =>
                {
                    b.Property<long>("GarbageTypesId")
                        .HasColumnType("bigint");

                    b.Property<long>("GarbagesId")
                        .HasColumnType("bigint");

                    b.HasKey("GarbageTypesId", "GarbagesId");

                    b.HasIndex("GarbagesId");

                    b.ToTable("GarbageGarbageType");
                });

            modelBuilder.Entity("GarbageReceptionPointGarbageType", b =>
                {
                    b.Property<long>("GarbageReceptionPointsId")
                        .HasColumnType("bigint");

                    b.Property<long>("GarbageTypesId")
                        .HasColumnType("bigint");

                    b.HasKey("GarbageReceptionPointsId", "GarbageTypesId");

                    b.HasIndex("GarbageTypesId");

                    b.ToTable("GarbageReceptionPointGarbageType");
                });

            modelBuilder.Entity("GarbageGarbageType", b =>
                {
                    b.HasOne("DAL.Entity.GarbageType", null)
                        .WithMany()
                        .HasForeignKey("GarbageTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entity.Garbage", null)
                        .WithMany()
                        .HasForeignKey("GarbagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GarbageReceptionPointGarbageType", b =>
                {
                    b.HasOne("DAL.Entity.GarbageReceptionPoint", null)
                        .WithMany()
                        .HasForeignKey("GarbageReceptionPointsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entity.GarbageType", null)
                        .WithMany()
                        .HasForeignKey("GarbageTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
